def toolmove():
  global _hidden_verificationVariable=0
  step_count_9f499528_ccc1_46f1_b6e4_02f34ba96a24 = 0.0
  thread Step_Counter_Thread_026cdf72_a9d4_4c88_bb95_1c7d5ea16f68():
    while (True):
      step_count_9f499528_ccc1_46f1_b6e4_02f34ba96a24 = step_count_9f499528_ccc1_46f1_b6e4_02f34ba96a24 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_026cdf72_a9d4_4c88_bb95_1c7d5ea16f68()
  modbus_add_signal("192.168.0.133", 255, 128, 2, "x0", True)
  modbus_set_signal_update_frequency("x0", 10)
  modbus_add_signal("192.168.0.133", 255, 129, 2, "zo", True)
  modbus_set_signal_update_frequency("zo", 10)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 1)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(0.200000, [0.000000, 0.000000, 0.000000], [0.000105, 0.000105, 0.000105, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 2)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  $ 1 "Robot Program"
  $ 2 "MoveL"
  $ 3 "Direction: Tool X+"
  global move_thread_flag_3=0
  thread move_thread_3():
    enter_critical
    move_thread_flag_3 = 1
    local towardsPos=calculate_point_to_move_towards(get_forward_kin(), [1.0,0.0,0.0], 0.01)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_3 = 2
    exit_critical
  end
  move_thread_flag_3 = 0
  move_thread_han_3 = run move_thread_3()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_3 > 1):
      join move_thread_han_3
      $ 4 "Until (distance)"
      break
    end
    sync()
  end
end
